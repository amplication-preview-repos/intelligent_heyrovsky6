/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Salesman as PrismaSalesman,
  VisitRecord as PrismaVisitRecord,
  Company as PrismaCompany,
} from "@prisma/client";

export class SalesmanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SalesmanCountArgs, "select">): Promise<number> {
    return this.prisma.salesman.count(args);
  }

  async salesmen(args: Prisma.SalesmanFindManyArgs): Promise<PrismaSalesman[]> {
    return this.prisma.salesman.findMany(args);
  }
  async salesman(
    args: Prisma.SalesmanFindUniqueArgs
  ): Promise<PrismaSalesman | null> {
    return this.prisma.salesman.findUnique(args);
  }
  async createSalesman(
    args: Prisma.SalesmanCreateArgs
  ): Promise<PrismaSalesman> {
    return this.prisma.salesman.create(args);
  }
  async updateSalesman(
    args: Prisma.SalesmanUpdateArgs
  ): Promise<PrismaSalesman> {
    return this.prisma.salesman.update(args);
  }
  async deleteSalesman(
    args: Prisma.SalesmanDeleteArgs
  ): Promise<PrismaSalesman> {
    return this.prisma.salesman.delete(args);
  }

  async findVisitRecords(
    parentId: string,
    args: Prisma.VisitRecordFindManyArgs
  ): Promise<PrismaVisitRecord[]> {
    return this.prisma.salesman
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .visitRecords(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.salesman
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
