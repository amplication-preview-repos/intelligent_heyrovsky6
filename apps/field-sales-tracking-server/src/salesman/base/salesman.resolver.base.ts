/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Salesman } from "./Salesman";
import { SalesmanCountArgs } from "./SalesmanCountArgs";
import { SalesmanFindManyArgs } from "./SalesmanFindManyArgs";
import { SalesmanFindUniqueArgs } from "./SalesmanFindUniqueArgs";
import { CreateSalesmanArgs } from "./CreateSalesmanArgs";
import { UpdateSalesmanArgs } from "./UpdateSalesmanArgs";
import { DeleteSalesmanArgs } from "./DeleteSalesmanArgs";
import { VisitRecordFindManyArgs } from "../../visitRecord/base/VisitRecordFindManyArgs";
import { VisitRecord } from "../../visitRecord/base/VisitRecord";
import { Company } from "../../company/base/Company";
import { SalesmanService } from "../salesman.service";
@graphql.Resolver(() => Salesman)
export class SalesmanResolverBase {
  constructor(protected readonly service: SalesmanService) {}

  async _salesmenMeta(
    @graphql.Args() args: SalesmanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Salesman])
  async salesmen(
    @graphql.Args() args: SalesmanFindManyArgs
  ): Promise<Salesman[]> {
    return this.service.salesmen(args);
  }

  @graphql.Query(() => Salesman, { nullable: true })
  async salesman(
    @graphql.Args() args: SalesmanFindUniqueArgs
  ): Promise<Salesman | null> {
    const result = await this.service.salesman(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Salesman)
  async createSalesman(
    @graphql.Args() args: CreateSalesmanArgs
  ): Promise<Salesman> {
    return await this.service.createSalesman({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Salesman)
  async updateSalesman(
    @graphql.Args() args: UpdateSalesmanArgs
  ): Promise<Salesman | null> {
    try {
      return await this.service.updateSalesman({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Salesman)
  async deleteSalesman(
    @graphql.Args() args: DeleteSalesmanArgs
  ): Promise<Salesman | null> {
    try {
      return await this.service.deleteSalesman(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [VisitRecord], { name: "visitRecords" })
  async findVisitRecords(
    @graphql.Parent() parent: Salesman,
    @graphql.Args() args: VisitRecordFindManyArgs
  ): Promise<VisitRecord[]> {
    const results = await this.service.findVisitRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: Salesman
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
