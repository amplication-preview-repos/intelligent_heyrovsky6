/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesmanService } from "../salesman.service";
import { SalesmanCreateInput } from "./SalesmanCreateInput";
import { Salesman } from "./Salesman";
import { SalesmanFindManyArgs } from "./SalesmanFindManyArgs";
import { SalesmanWhereUniqueInput } from "./SalesmanWhereUniqueInput";
import { SalesmanUpdateInput } from "./SalesmanUpdateInput";
import { VisitRecordFindManyArgs } from "../../visitRecord/base/VisitRecordFindManyArgs";
import { VisitRecord } from "../../visitRecord/base/VisitRecord";
import { VisitRecordWhereUniqueInput } from "../../visitRecord/base/VisitRecordWhereUniqueInput";

export class SalesmanControllerBase {
  constructor(protected readonly service: SalesmanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Salesman })
  async createSalesman(
    @common.Body() data: SalesmanCreateInput
  ): Promise<Salesman> {
    return await this.service.createSalesman({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        company: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Salesman] })
  @ApiNestedQuery(SalesmanFindManyArgs)
  async salesmen(@common.Req() request: Request): Promise<Salesman[]> {
    const args = plainToClass(SalesmanFindManyArgs, request.query);
    return this.service.salesmen({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        company: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Salesman })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesman(
    @common.Param() params: SalesmanWhereUniqueInput
  ): Promise<Salesman | null> {
    const result = await this.service.salesman({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        name: true,

        company: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Salesman })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesman(
    @common.Param() params: SalesmanWhereUniqueInput,
    @common.Body() data: SalesmanUpdateInput
  ): Promise<Salesman | null> {
    try {
      return await this.service.updateSalesman({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          name: true,

          company: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Salesman })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesman(
    @common.Param() params: SalesmanWhereUniqueInput
  ): Promise<Salesman | null> {
    try {
      return await this.service.deleteSalesman({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          name: true,

          company: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/visitRecords")
  @ApiNestedQuery(VisitRecordFindManyArgs)
  async findVisitRecords(
    @common.Req() request: Request,
    @common.Param() params: SalesmanWhereUniqueInput
  ): Promise<VisitRecord[]> {
    const query = plainToClass(VisitRecordFindManyArgs, request.query);
    const results = await this.service.findVisitRecords(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        photo: true,
        location: true,

        salesman: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/visitRecords")
  async connectVisitRecords(
    @common.Param() params: SalesmanWhereUniqueInput,
    @common.Body() body: VisitRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      visitRecords: {
        connect: body,
      },
    };
    await this.service.updateSalesman({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/visitRecords")
  async updateVisitRecords(
    @common.Param() params: SalesmanWhereUniqueInput,
    @common.Body() body: VisitRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      visitRecords: {
        set: body,
      },
    };
    await this.service.updateSalesman({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/visitRecords")
  async disconnectVisitRecords(
    @common.Param() params: SalesmanWhereUniqueInput,
    @common.Body() body: VisitRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      visitRecords: {
        disconnect: body,
      },
    };
    await this.service.updateSalesman({
      where: params,
      data,
      select: { id: true },
    });
  }
}
