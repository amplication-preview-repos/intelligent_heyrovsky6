/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VisitRecordService } from "../visitRecord.service";
import { VisitRecordCreateInput } from "./VisitRecordCreateInput";
import { VisitRecord } from "./VisitRecord";
import { VisitRecordFindManyArgs } from "./VisitRecordFindManyArgs";
import { VisitRecordWhereUniqueInput } from "./VisitRecordWhereUniqueInput";
import { VisitRecordUpdateInput } from "./VisitRecordUpdateInput";

export class VisitRecordControllerBase {
  constructor(protected readonly service: VisitRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VisitRecord })
  async createVisitRecord(
    @common.Body() data: VisitRecordCreateInput
  ): Promise<VisitRecord> {
    return await this.service.createVisitRecord({
      data: {
        ...data,

        salesman: data.salesman
          ? {
              connect: data.salesman,
            }
          : undefined,

        shop: data.shop
          ? {
              connect: data.shop,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        photo: true,
        location: true,

        salesman: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VisitRecord] })
  @ApiNestedQuery(VisitRecordFindManyArgs)
  async visitRecords(@common.Req() request: Request): Promise<VisitRecord[]> {
    const args = plainToClass(VisitRecordFindManyArgs, request.query);
    return this.service.visitRecords({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        photo: true,
        location: true,

        salesman: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VisitRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async visitRecord(
    @common.Param() params: VisitRecordWhereUniqueInput
  ): Promise<VisitRecord | null> {
    const result = await this.service.visitRecord({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        photo: true,
        location: true,

        salesman: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VisitRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVisitRecord(
    @common.Param() params: VisitRecordWhereUniqueInput,
    @common.Body() data: VisitRecordUpdateInput
  ): Promise<VisitRecord | null> {
    try {
      return await this.service.updateVisitRecord({
        where: params,
        data: {
          ...data,

          salesman: data.salesman
            ? {
                connect: data.salesman,
              }
            : undefined,

          shop: data.shop
            ? {
                connect: data.shop,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          photo: true,
          location: true,

          salesman: {
            select: {
              id: true,
            },
          },

          shop: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VisitRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVisitRecord(
    @common.Param() params: VisitRecordWhereUniqueInput
  ): Promise<VisitRecord | null> {
    try {
      return await this.service.deleteVisitRecord({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          photo: true,
          location: true,

          salesman: {
            select: {
              id: true,
            },
          },

          shop: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
