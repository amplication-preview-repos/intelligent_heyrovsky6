/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VisitRecord } from "./VisitRecord";
import { VisitRecordCountArgs } from "./VisitRecordCountArgs";
import { VisitRecordFindManyArgs } from "./VisitRecordFindManyArgs";
import { VisitRecordFindUniqueArgs } from "./VisitRecordFindUniqueArgs";
import { CreateVisitRecordArgs } from "./CreateVisitRecordArgs";
import { UpdateVisitRecordArgs } from "./UpdateVisitRecordArgs";
import { DeleteVisitRecordArgs } from "./DeleteVisitRecordArgs";
import { Salesman } from "../../salesman/base/Salesman";
import { Shop } from "../../shop/base/Shop";
import { VisitRecordService } from "../visitRecord.service";
@graphql.Resolver(() => VisitRecord)
export class VisitRecordResolverBase {
  constructor(protected readonly service: VisitRecordService) {}

  async _visitRecordsMeta(
    @graphql.Args() args: VisitRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VisitRecord])
  async visitRecords(
    @graphql.Args() args: VisitRecordFindManyArgs
  ): Promise<VisitRecord[]> {
    return this.service.visitRecords(args);
  }

  @graphql.Query(() => VisitRecord, { nullable: true })
  async visitRecord(
    @graphql.Args() args: VisitRecordFindUniqueArgs
  ): Promise<VisitRecord | null> {
    const result = await this.service.visitRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VisitRecord)
  async createVisitRecord(
    @graphql.Args() args: CreateVisitRecordArgs
  ): Promise<VisitRecord> {
    return await this.service.createVisitRecord({
      ...args,
      data: {
        ...args.data,

        salesman: args.data.salesman
          ? {
              connect: args.data.salesman,
            }
          : undefined,

        shop: args.data.shop
          ? {
              connect: args.data.shop,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VisitRecord)
  async updateVisitRecord(
    @graphql.Args() args: UpdateVisitRecordArgs
  ): Promise<VisitRecord | null> {
    try {
      return await this.service.updateVisitRecord({
        ...args,
        data: {
          ...args.data,

          salesman: args.data.salesman
            ? {
                connect: args.data.salesman,
              }
            : undefined,

          shop: args.data.shop
            ? {
                connect: args.data.shop,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VisitRecord)
  async deleteVisitRecord(
    @graphql.Args() args: DeleteVisitRecordArgs
  ): Promise<VisitRecord | null> {
    try {
      return await this.service.deleteVisitRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Salesman, {
    nullable: true,
    name: "salesman",
  })
  async getSalesman(
    @graphql.Parent() parent: VisitRecord
  ): Promise<Salesman | null> {
    const result = await this.service.getSalesman(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Shop, {
    nullable: true,
    name: "shop",
  })
  async getShop(@graphql.Parent() parent: VisitRecord): Promise<Shop | null> {
    const result = await this.service.getShop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
